for back
  schemas
    must add login/register logic -> might implement in the same time as googleAuth
    could add dynamic price logic for listings, cancellation policy
    add cleaningFee, serviceFee, tax -> might be bad ux

  controllers
    add listing controller that gets all cabins in x radius (based on user location)
  
for front
  combine react router's loader (pre-fetching) with reqct query's data fetching and optimistic rendering (when there's available data)

  use lazy loading and wrap components in <Suspense /> to show a fallback while they load

  Use Suspense: When you are lazy loading components and want a cleaner, more declarative approach.

  Use Conditional Loading: When you need more control over the loading state, especially for data fetching scenarios.

  Initial Data Load:
  Use React Router's loader for initial data load when navigating to a new route. This ensures that the data is available when the component is rendered, providing a seamless user experience.
  
  Subsequent Data Fetching:
  Use React Query for subsequent data fetching, caching, and synchronization. React Query excels at managing server state and keeping the UI in sync with the server.

  Optimistic Rendering:
  Use React Query for optimistic updates. This allows you to update the UI immediately while the server processes the request, providing a more responsive user experience.
  
  Background Updates: 
  Use React Query to keep data fresh by refetching it in the background. This ensures that the user always sees the most up-to-date information.

sass 
  cool resources i used here: 
    https://sass-guidelin.es/ -> about everything
    https://github.com/KittyGiraudel/sass-boilerplate/tree/master -> sass boilerplate
    https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/ -> bem
    https://sass-lang.com/documentation/
  

  keep it simple. don't repeat yourself

  focus on @use and @forward
    @use 'abstracts/fonts'; body {fot-size: fonts.$font-size} -> new way, safer
    no longer accessible to children, import in every file
    @forward -> bring into file to forward (to another file - main.scss)
    @use -> bring into file to use

    create _index.scss in evey folder, import in main with @use '../abstracts' (with @forward in index)

  set guidelines
    add @charset 'utf-8'; to the main file
    constants always in caps
    @extends -> dont forget 
    @includes is deprecated

    BEM
      .block {}
      .block__element {}
      .block--modifier {}

  themes
    define pallettes -> create mixin



examples
    @mixin prefix($property, $value, $prefixes: ()) {
      @each $prefix in $prefixes {
        -#{$prefix}-#{$property}: $value;
      }

      #{$property}: $value;
    }

    .foo {
       @include prefix(transform, rotate(90deg), ('webkit', 'ms'));
    }


libraries: 
  mongoose, express, dotenv, cors (connect different ports), path

  validator, 
  multer (image handling), 
  sharp (image manipulation: resizing, converting, metadata, etc)
  react-icons


routes structure
  must have
    / -> home, displays the properties

    /account -> user's personal control panel

    /bookings -> displays a user's bookings
    /bookings/:bookingId

    /wishlist

    /listings/:listingId -> display a single cabin

    /pagenotfound -> pages that dont exist
    
    errorElement = <ErrorPage />

  might add later
    /registerProperty -> allows users to add their own locations
    /hosts/:hostid -> see a host's profile